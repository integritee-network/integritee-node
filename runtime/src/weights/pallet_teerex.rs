
//! Autogenerated weights for `pallet_teerex`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-13, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `caribe`, CPU: `12th Gen Intel(R) Core(TM) i7-1260P`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("integritee-solo-fresh"), DB CACHE: 1024

// Executed Command:
// target/release/integritee-node
// benchmark
// pallet
// --chain=integritee-solo-fresh
// --steps=50
// --repeat=20
// --pallet=pallet_teerex
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=runtime/src/weights/pallet_teerex.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_teerex`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_teerex::WeightInfo for WeightInfo<T> {
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Teerex SgxQuotingEnclaveRegistry (r:1 w:0)
	/// Proof Skipped: Teerex SgxQuotingEnclaveRegistry (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Teerex SgxTcbInfo (r:1 w:0)
	/// Proof Skipped: Teerex SgxTcbInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: Teerex SgxAllowDebugMode (r:1 w:0)
	/// Proof Skipped: Teerex SgxAllowDebugMode (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Teerex SovereignEnclaves (r:0 w:1)
	/// Proof Skipped: Teerex SovereignEnclaves (max_values: None, max_size: None, mode: Measured)
	fn register_sgx_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `394`
		//  Estimated: `3859`
		// Minimum execution time: 2_017_551_000 picoseconds.
		Weight::from_parts(2_049_028_000, 0)
			.saturating_add(Weight::from_parts(0, 3859))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Teerex SgxQuotingEnclaveRegistry (r:0 w:1)
	/// Proof Skipped: Teerex SgxQuotingEnclaveRegistry (max_values: Some(1), max_size: None, mode: Measured)
	fn register_quoting_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `95`
		//  Estimated: `1493`
		// Minimum execution time: 1_016_200_000 picoseconds.
		Weight::from_parts(1_031_990_000, 0)
			.saturating_add(Weight::from_parts(0, 1493))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Teerex SgxTcbInfo (r:0 w:1)
	/// Proof Skipped: Teerex SgxTcbInfo (max_values: None, max_size: None, mode: Measured)
	fn register_tcb_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `95`
		//  Estimated: `1493`
		// Minimum execution time: 1_120_761_000 picoseconds.
		Weight::from_parts(1_128_361_000, 0)
			.saturating_add(Weight::from_parts(0, 1493))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Teerex SovereignEnclaves (r:1 w:1)
	/// Proof Skipped: Teerex SovereignEnclaves (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn unregister_sovereign_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `473`
		//  Estimated: `3938`
		// Minimum execution time: 17_250_000 picoseconds.
		Weight::from_parts(18_139_000, 0)
			.saturating_add(Weight::from_parts(0, 3938))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Teerex ProxiedEnclaves (r:1 w:1)
	/// Proof Skipped: Teerex ProxiedEnclaves (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn unregister_proxied_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `575`
		//  Estimated: `4040`
		// Minimum execution time: 20_486_000 picoseconds.
		Weight::from_parts(21_264_000, 0)
			.saturating_add(Weight::from_parts(0, 4040))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
