
//! Autogenerated weights for `pallet_teerex`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 39.0.0
//! DATE: 2024-07-19, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `caribe`, CPU: `12th Gen Intel(R) Core(TM) i7-1260P`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("integritee-solo-fresh")`, DB CACHE: 1024

// Executed Command:
// target/release/integritee-node
// benchmark
// pallet
// --chain=integritee-solo-fresh
// --steps=50
// --repeat=20
// --pallet=pallet_teerex
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=runtime/src/weights/pallet_teerex.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_teerex`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_teerex::WeightInfo for WeightInfo<T> {
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Teerex::SgxQuotingEnclaveRegistry` (r:1 w:0)
	/// Proof: `Teerex::SgxQuotingEnclaveRegistry` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Teerex::SgxTcbInfo` (r:1 w:0)
	/// Proof: `Teerex::SgxTcbInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Teerex::SgxAllowDebugMode` (r:1 w:0)
	/// Proof: `Teerex::SgxAllowDebugMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Teerex::SovereignEnclaves` (r:0 w:1)
	/// Proof: `Teerex::SovereignEnclaves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_sgx_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `747`
		//  Estimated: `4212`
		// Minimum execution time: 1_782_295_000 picoseconds.
		Weight::from_parts(1_878_292_000, 0)
			.saturating_add(Weight::from_parts(0, 4212))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Teerex::SgxQuotingEnclaveRegistry` (r:0 w:1)
	/// Proof: `Teerex::SgxQuotingEnclaveRegistry` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn register_quoting_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `95`
		//  Estimated: `1493`
		// Minimum execution time: 878_534_000 picoseconds.
		Weight::from_parts(967_967_000, 0)
			.saturating_add(Weight::from_parts(0, 1493))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Teerex::SgxTcbInfo` (r:0 w:1)
	/// Proof: `Teerex::SgxTcbInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register_tcb_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `95`
		//  Estimated: `1493`
		// Minimum execution time: 972_996_000 picoseconds.
		Weight::from_parts(1_047_268_000, 0)
			.saturating_add(Weight::from_parts(0, 1493))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Teerex::SovereignEnclaves` (r:1 w:1)
	/// Proof: `Teerex::SovereignEnclaves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn unregister_sovereign_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `494`
		//  Estimated: `3959`
		// Minimum execution time: 14_760_000 picoseconds.
		Weight::from_parts(16_518_000, 0)
			.saturating_add(Weight::from_parts(0, 3959))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Teerex::ProxiedEnclaves` (r:1 w:1)
	/// Proof: `Teerex::ProxiedEnclaves` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn unregister_proxied_enclave() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `596`
		//  Estimated: `4061`
		// Minimum execution time: 16_696_000 picoseconds.
		Weight::from_parts(17_663_000, 0)
			.saturating_add(Weight::from_parts(0, 4061))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Teerex::SgxAllowDebugMode` (r:0 w:1)
	/// Proof: `Teerex::SgxAllowDebugMode` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Teerex::AllowSkippingAttestation` (r:0 w:1)
	/// Proof: `Teerex::AllowSkippingAttestation` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_security_flags() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_822_000 picoseconds.
		Weight::from_parts(5_316_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
